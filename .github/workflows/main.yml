name: AI Docs Update

on:
  # Run automatically on every push to feature branches
  push:
    branches:
      - main

permissions:                     # Extra scopes for writing to the repo
  contents: write
  pull-requests: write
  models: read

jobs:
  generate-docs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # 1️⃣ Create a diff for this push using before/after SHAs
      - name: Generate diff
        id: diff
        run: |
          BEFORE="${{ github.event.before }}"
          AFTER="${{ github.sha }}"
          if [ -z "$BEFORE" ] || ! git cat-file -e "$BEFORE"^{commit} 2>/dev/null; then
            BEFORE="$(git rev-parse "$AFTER^")"
          fi
          git diff --unified=0 "$BEFORE" "$AFTER" > diff.patch
          if [ -s diff.patch ]; then
            echo "diff_path=diff.patch" >> "$GITHUB_OUTPUT"
            echo "has_diff=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_diff=false" >> "$GITHUB_OUTPUT"
          fi

      # 2️⃣ Call the model with the diff as context
      - name: Ask model to update docs
        if: steps.diff.outputs.has_diff == 'true'
        id: ai
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DIFF: ${{ steps.diff.outputs.diff_path }}
        run: |
          DIFF_CONTENT="$(cat "$DIFF")"
          jq -n --arg diff "$DIFF_CONTENT" '{
            messages: [
              {role:"system", content:"You are an expert technical writer. Update repository documentation precisely and succinctly based on the provided diff only."},
              {role:"user", content:("Update the repository docs.md to reflect the following code diff.\n\n" + $diff + "\n\nReturn ONLY the full, updated docs.md file content. Do not include code fences, code blocks, or any commentary.")}
            ],
            model: "openai/gpt-4o"
          }' > payload.json
          curl -s https://models.github.ai/inference/chat/completions \
               -H "Authorization: Bearer $GITHUB_TOKEN" \
               -H "Content-Type: application/json" \
               -d @payload.json > response.json
          jq -r '.choices[0].message.content' response.json > docs.md

      # 3️⃣ Apply the model's edits to docs.md
      - name: Apply changes from model
        id: changes
        run: |
          # docs.md has already been updated directly by the previous step
          git config user.name "docs-bot"
          git config user.email "docs-bot@users.noreply.github.com"
          
          # Check if there are any changes
          if git diff --quiet docs.md; then
            echo "No changes to docs.md, skipping PR creation"
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          echo "has_changes=true" >> "$GITHUB_OUTPUT"
          git switch -c docs/update-${{ github.run_id }}
          git add docs.md
          git commit -m "docs: automated update via LLM"

      # 4️⃣ Create or update a PR
      - name: Create pull request
        id: cpr
        if: steps.changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "docs: automated update via LLM"
          title: "docs: AI-generated update"
          body: |
            This PR was generated automatically from changes in ${{ github.ref }}.
            Please review before merging.
          branch: docs/update-${{ github.run_id }}
          base: main
          draft: false   # you can set to true if you want it as a draft

  # 5️⃣ Optional: block until a reviewer OKs 
  require-approval:
    needs: generate-docs
    runs-on: ubuntu-latest
    environment: docs-review          # <- configure this env with *Required reviewers*
    steps:
      - run: echo "Docs were generated; waiting for approval to proceed."
